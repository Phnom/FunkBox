{"version":3,"sources":["FunkBox.js","App.js","reportWebVitals.js","index.js"],"names":["round","value","precision","multiplier","Math","pow","Sequence","eventCb","instrument","pattern","start","this","events","step","spanList","length","sequencePattern","Tone","Sampler","sampleUrls","name","urls","baseUrl","process","drawClass","seqSampler","time","channelLabel","document","querySelector","schedule","classList","add","remove","triggerAttackRelease","instrumentChannel","setInstrument","sequence","getPattern","toDestination","setStep","channelData","Kick","Snare","Clap","Hihat","channelList","Object","keys","instruments","toggle","innerText","bpm","forEach","channel","changeValue","direction","floor","changeBpm","swing","changeSwing","vh","window","innerHeight","documentElement","style","setProperty","SequenceChannel","className","map","index","onClick","stepDiv","innerHTML","changeStep","ControllItem","DisplayItem","App","useState","isloaded","setLoad","startSpan","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oPAwMMA,EAAQ,SAACC,EAAOC,GACpB,IAAIC,EAAaC,KAAKC,IAAI,GAAIH,GAAa,GAC3C,OAAOE,KAAKJ,MAAMC,EAAQE,GAAcA,GAGpCG,E,kDAIJ,WAAYC,EAASC,EAAYC,GAAU,IAAD,8BACxC,cAAMF,EAASE,GAAoB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC3DA,QAAUA,EACf,EAAKD,WAAaA,GAA0B,WAC5C,EAAKE,MAAM,GAJ6B,E,8CAM1C,WACE,OAAOC,KAAKC,S,qBAEd,SAAQC,GACN,IAAIC,EAAW,GACf,OAAQH,KAAKC,OAAOC,GAAME,QACxB,KAAK,EACHJ,KAAKC,OAAOC,GAAQ,CAAC,CAAC,OACtBC,EAAW,iBACb,MACA,KAAK,EACHH,KAAKC,OAAOC,GAAQ,CAAC,CAAC,MAAO,CAAC,OAC9BC,EAAW,+BACb,MACA,KAAK,EACCH,KAAKC,OAAOC,GAAM,GAAG,IACvBF,KAAKC,OAAOC,GAAM,GAAK,GACvBC,EAAW,iCAEXH,KAAKC,OAAOC,GAAQ,CAAC,CAAC,MAAO,CAAC,MAAO,CAAC,OACtCC,EAAW,8CAEf,MACA,KAAK,EACCH,KAAKC,OAAOC,GAAM,GAAG,IAAMF,KAAKC,OAAOC,GAAM,GAAG,IAClDF,KAAKC,OAAOC,GAAQ,CAAC,GAAI,CAAC,MAAO,CAAC,OAClCC,EAAW,+CACDH,KAAKC,OAAOC,GAAM,GAAG,IAAMF,KAAKC,OAAOC,GAAM,GAAG,IAC1DF,KAAKC,OAAOC,GAAQ,CAAC,GAAI,GAAI,CAAC,OAC9BC,EAAW,+CAEXH,KAAKC,OAAOC,GAAQ,GACpBC,EAAW,IAEf,MACA,QACEH,KAAKC,OAAOC,GAAQ,GACpBC,EAAW,GAGf,OAAOA,K,0BAjDT,SAAmBP,EAASS,EAAiBP,GAC3C,OAAO,IAAIH,EAASC,EAASS,EAAiBP,O,GAF3BQ,KAqDjBC,E,kDACJ,WAAYC,EAAYC,GAAO,IAAD,8BAC5B,cAAM,CACJC,KAAMF,EACNG,QAASC,cAENH,KAAOA,EACZ,EAAKI,UAAY,IAAI,EAAKJ,KAAK,OAC/B,EAAKb,QAAU,EAAKkB,WAPQ,E,8CAS9B,SAAWC,GACT,IAAIC,EAAeC,SAASC,cAAclB,KAAKH,WAAWgB,WAC1DP,IAAUa,UAAS,WACjBH,EAAaI,UAAUC,IAAI,UAC1BN,GACHT,IAAea,UAAS,SAACJ,GACvBT,IAAUa,UAAS,WACjBH,EAAaI,UAAUE,OAAO,UAC7BP,KACF,SACHf,KAAKH,WAAW0B,qBAAqB,CAAC,IAAK,MAAOR,O,GApBhCT,KAuBhBkB,E,WACJ,WAAYf,EAAMX,GAAU,oBAC1BE,KAAKF,QAAUA,EACfE,KAAKS,KAAOA,EACZT,KAAKH,WAAaG,KAAKyB,cAAczB,KAAKS,MAC1CT,KAAK0B,SAAW,IAAI/B,EAASK,KAAKH,WAAWD,QAASI,KAAKH,WAAYG,KAAKF,S,8CAE9E,WACE,OAAOE,KAAK0B,SAASC,e,2BAEvB,SAAc9B,GACV,OAAO,IAAIU,EAAQ,CACf,GAAG,UAAH,OAAcV,EAAd,UACDG,KAAKS,MAAMmB,kB,qBAElB,SAAQ1B,GACN,OAAOF,KAAK0B,SAASG,QAAQ3B,O,KAG3B4B,EAAc,CAClBC,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACnCC,MAAO,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACpCC,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACnCC,MAAO,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAUzBC,EAAc,WACzB,IAAMA,EAAcC,OAAOC,KAAKP,GAChC,OAAOK,GAeIG,EAAc,GAEdC,EAAS,SAACC,GAQrB,MAPkB,SAAdA,GACFlC,IAAemC,IAAInD,MAAQ,GAC3BgB,MA5BkB8B,OAAOC,KAAKP,GACpBY,SAAQ,SAAAC,GAClBL,EAAYK,GAAW,IAAInB,EAAkBmB,EAASb,EAAYa,QA6BlErC,IAAeiC,SAEI,UAAdC,EAAwB,OAAS,SAqB7BI,EAAc,SAACC,EAAWpC,GAC5B,QAATA,EAnBgB,SAACoC,GACC,OAAdA,EACFvC,IAAemC,IAAInD,OAAS,IAAMgB,IAAemC,IAAInD,MAAQ,GAAKgB,IAAemC,IAAInD,OAAS,EAE9FgB,IAAemC,IAAInD,OAAS,GAAKgB,IAAemC,IAAInD,MAAQ,IAAMgB,IAAemC,IAAInD,OAAS,EAEhG2B,SAASC,cAAc,yBAAyBsB,UAAY/C,KAAKqD,MAAMxC,IAAemC,IAAInD,OAazEyD,CAAUF,GAVT,SAACA,GACD,OAAdA,EACFvC,IAAe0C,OAAS,IAAO1C,IAAe0C,MAAQ,EAAI1C,IAAe0C,MAAQ3D,EAAMiB,IAAe0C,OAAS,GAAK,GAEpH1C,IAAe0C,OAAS,EAAI1C,IAAe0C,MAAQ,EAAI3D,EAAMiB,IAAe0C,OAAS,GAAK,GAE5F/B,SAASC,cAAc,2BAA2BsB,UAAY/C,KAAKJ,MAA6B,IAAvBiB,IAAe0C,OAIhDC,CAAYJ,I,OCtWlDK,EAA0B,IAArBC,OAAOC,YAEhBnC,SAASoC,gBAAgBC,MAAMC,YAAY,OAA3C,UAAsDL,EAAtD,OAEA,IA2CMM,EAAkB,SAAC,GAAe,IAAdb,EAAa,EAAbA,QAOxB,OACA,qBAAKc,UAAW,mBAAqBd,EAAU,OAA/C,SAPiB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAQzBe,KAAI,SAACC,GAAD,OACZ,wBAAoBF,UAAU,eAAeG,QAAS,kBARzC,SAACD,GAClB,IAAME,EAAU5C,SAASC,cAAc,IAAMyB,EAAUgB,GACjDxD,EAAWmC,EAAYK,GAASd,QAAQ8B,GAC9CE,EAAQC,UAAY3D,EAK4C4D,CAAWJ,IAAvE,SACI,qBAAKF,UAAWd,EAAQgB,KADfA,SAUfK,EAAe,SAAC,GAAY,IAAXvD,EAAU,EAAVA,KACrB,OACA,sBAAKgD,UAAWhD,EAAK,YAArB,UACI,wBAAQgD,UAAU,MAAMG,QAAS,kBAAMhB,EAAY,KAAMnC,IAAzD,eAGA,wBAAQgD,UAAU,MAAMG,QAAS,kBAAMhB,EAAY,OAAQnC,IAA3D,mBAOAwD,EAAc,SAAC,GAAY,IAAXxD,EAAU,EAAVA,KACpB,OACE,sBAAKgD,UAAW,oBAAsBhD,EAAO,UAA7C,UACE,4BACGA,IAEH,mBAAGgD,UAAU,WAAb,qBAOSS,EAzFH,WACV,MAA6BC,oBAAS,GAAtC,mBAAOC,EAAP,KAAiBC,EAAjB,KAMA,OACA,sBAAKZ,UAAU,MAAf,UACE,+BACE,wCACA,0CAEF,qBAAKA,UAAU,oBAAf,SACIW,EAAWjC,IAAcuB,KAAI,SAACf,EAASgB,GAAV,OAC/B,cAAC,EAAD,CAA6BhB,QAASA,GAAhBgB,MAGpB,0BAIFS,EACA,sBAAKX,UAAU,mBAAf,UACE,cAAC,EAAD,CAAchD,KAAK,QACnB,cAAC,EAAD,CAAaA,KAAK,QAClB,cAAC,EAAD,CAAcA,KAAK,UACnB,cAAC,EAAD,CAAaA,KAAK,aAGpB,qBAAKgD,UAAU,mBAIjB,qBAAKA,UAAU,uBAAf,SACE,wBAAQA,UAAU,cAAcG,QAAS,kBAjC/B,WACZ,IAAIU,EAAYrD,SAASC,cAAc,cACvCoD,EAAU9B,UAAYD,EAAO+B,EAAU9B,WAClC4B,GAAUC,GAAQ,GA8B0BtE,IAA/C,SACE,sBAAM0D,UAAU,YAAhB,0BCjCOc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjE,SAASkE,eAAe,SAM1BZ,M","file":"static/js/main.c260c8e1.chunk.js","sourcesContent":["import * as Tone from \"tone\"\n/*\nclass Sampler extends Tone.Sampler {\n  constructor(sampleUrls, sampleBaseUrl) {\n    super({\n      urls: sampleUrls,\n      baseUrl: sampleBaseUrl ? sampleBaseUrl : process.env.PUBLIC_URL,\n    })\n    this.eventCb = this.seqSampler\n  }\n  seqSampler(time) {\n    this.drawSequence()\n    this.instrument.triggerAttackRelease([24], \"16n\", time)\n  }\n}\n\nclass Sequence extends Tone.Sequence {\n  static newSequence(eventCb, sequencePattern) {\n    return new Sequence(eventCb, sequencePattern)\n  }\n  constructor(name, eventCb, sequencePattern, instrument, drawTarget) {\n    super(eventCb, sequencePattern)\n    this.instrument = instrument ? instrument : \"No Sound\"\n    this.drawTarget = drawTarget ? drawTarget : \".blink-\" + name\n    this.drawClass = \"seq-now\"\n    this.start(0)\n  }\n  drawSequence() {\n    let channelLabel = document.querySelector(this.drawTarget)\n    Tone.Transport.schedule((time) => {\n      Tone.Draw.schedule(() => {\n        channelLabel.classList.contains(this.drawClass)\n          ? channelLabel.classList.add(this.drawClass + \"-second\")\n          : channelLabel.classList.add(this.drawClass)\n      }, time)\n      Tone.Transport.schedule((time) => {\n        Tone.Draw.schedule(() => {\n          channelLabel.classList.remove(this.drawClass)\n          channelLabel.classList.remove(this.drawClass + \"-second\")\n        }, time)\n      }, \"+0.2\")\n    }, \"+0.05\")\n  }\n}\n\nclass instrumentChannel {\n  constructor(instrument, name) {\n    this.name = name ? name : \"\"\n    this.instrument = this.setInstrument(instrument)\n    this.sequencePattern = [[], [], [], [], [], [], [], []]\n    this.sequence = new Sequence(\n      this.name,\n      this.instrument.eventCb,\n      this.sequencePattern,\n      this.instrument\n    )\n    this.drawTarget = \".blink-\" + name\n    this.drawClass = \"seq-now\"\n  }\n  setInstrument(instrument) {\n      return new Sampler({\n          24: \"/Drums/asHihat01.wav\",\n      }).toDestination()\n  }\n  getInstrument() {\n    return this.instrument\n  }\n  getEventCb() {\n    return this.eventCb\n  }\n  changeStep = (step) => {\n    let tempArr = this.sequence.events[step]\n    let button = document.querySelector(\".\" + this.name + step)\n    switch (this.sequence.events[step].length) {\n      case 0:\n        tempArr = [[\"C1\"]]\n        button.innerText = \"X\"\n        break\n      case 1:\n        tempArr = [[\"C1\"], [\"C1\"]]\n        button.innerText = \"XX\"\n        break\n      case 2:\n          if (this.sequence.events[step][0][0]) {\n              (tempArr = [[], [\"C1\"]])\n              button.innerText = \"0X\"\n          } else {\n              (tempArr = [[\"C1\"], [\"C1\"], [\"C1\"]])\n              button.innerText = \"XXX\"\n          }\n        break\n      case 3:\n        if (this.sequence.events[step][0][0]) {\n          tempArr = [[], [\"C1\"], [\"C1\"]]\n          button.innerText = \"OXX\"\n        } else if (this.sequence.events[step][1][0]) {\n          tempArr = [[], [], [\"C1\"]]\n          button.innerText = \"OOX\"\n        } else {\n          tempArr = []\n          button.innerText = \"\"\n        }\n        break\n      default:\n        tempArr = []\n        button.innerText = \"\"\n        break\n    }\n    this.sequence.events[step] = tempArr\n    // return till component => illustrera note, paus, triplet\n  }\n}\n\nclass mixerChannel {\n  constructor(channelList) {\n    this.mixerBus = {}\n    this.setMixer(channelList)\n    //this.sampleRecorder = new SampleRecorder(\"#Main-Screen\")\n    //this.canvas = new canvasAnimation(\"#Main-Screen\")\n  }\n  setChannel(name, type) {\n    this.mixerBus[name] = new instrumentChannel(type, name)\n  }\n  setMixer(channelList) {\n    for (let channel of channelList) {\n      this.setChannel(channel.name, channel.type)\n    }\n  }\n  changeStep(channel, step) {\n    if (this.mixerBus[channel]) {\n      this.mixerBus[channel].changeStep(step)\n    } else {\n      console.log(\"There is no channel named \" + channel)\n    }\n  }\n}\n\nlet isSetup = null\n\nlet mixer = {}\n\nexport const channelList = [\n  { name: \"Kick\", type: \"Sampler\" },\n  { name: \"Snare\", type: \"Sampler\" },\n  { name: \"Hihat\", type: \"Sampler\" },\n  { name: \"Shaker\", type: \"Sampler\" }\n]\n\n// setup\nconst Setup = () => {\n  mixer = new mixerChannel(channelList)\n  changeBpm(60)\n  Tone.Transport.start()\n  isSetup = true\n}\n\n// exports\n\nexport const changeStep = (step, name) => {\n  if (isSetup) {\n    mixer.changeStep(name, step)\n  }\n  // return till component => illustrera note, paus, triplet\n}\n\nexport const toggleLoop = () => {\n  let StartStop = document.querySelector(\".startSpan\")\n  isSetup ? Tone.Transport.toggle() : Setup()\n  StartStop.innerHTML === \"start\"\n    ? (StartStop.innerHTML = \"stop\")\n    : (StartStop.innerHTML = \"start\")\n}\nexport const stopLoop = () => {\n  Tone.Transport.stop()\n}\n\n\nexport const changeBpm = (change) => {\n    change ? Tone.Transport.bpm.value += 1 : Tone.Transport.bpm.value -= 1\n}\nexport const changeVolume = (change) => {\n    console.log(\"volume \" + change)\n}\n\nexport const channelList = [\n  \"Kick\",\n  \"Snare\",\n  \"Hihat\",\n  \"Shaker\"\n]\n\nexport const changeStep = () => {\n  console.log(\"change step\")\n}\n\nexport const toggleLoop = () => {\n  console.log(\"toggle loop\")\n}\n*/\n\nconst round = (value, precision) => {\n  var multiplier = Math.pow(10, precision || 0);\n  return Math.round(value * multiplier) / multiplier;\n}\n\nclass Sequence extends Tone.Sequence {\n  static newSequence(eventCb, sequencePattern, pattern) {\n    return new Sequence(eventCb, sequencePattern, pattern)\n  }\n  constructor(eventCb, instrument, pattern) {\n    super(eventCb, pattern ? pattern : [[], [], [], [], [], [], [], []])\n    this.pattern = pattern\n    this.instrument = instrument ? instrument : \"No Sound\"\n    this.start(0)\n  }\n  getPattern() {\n    return this.events\n  }\n  setStep(step) {\n    let spanList = \"\"\n    switch (this.events[step].length) {\n      case 0:\n        this.events[step] = [[\"C1\"]]\n        spanList = \"<span>X</span>\"\n      break\n      case 1:\n        this.events[step] = [[\"C1\"], [\"C1\"]]\n        spanList = \"<span>X</span><span>X</span>\"\n      break\n      case 2:\n        if (this.events[step][0][0]) {\n          this.events[step][0] = []\n          spanList = \"<span>O</span><span>X</span>\"\n        }else {\n          this.events[step] = [[\"C1\"], [\"C1\"], [\"C1\"]]\n          spanList = \"<span>X</span><span>X</span><span>X</span>\"\n        }\n      break\n      case 3:\n        if (this.events[step][0][0] && this.events[step][1][0]) {\n          this.events[step] = [[], [\"C1\"], [\"C1\"]]\n          spanList = \"<span>O</span><span>X</span><span>X</span>\"\n        } else if (!this.events[step][0][0] && this.events[step][1][0]) {\n          this.events[step] = [[], [], [\"C1\"]]\n          spanList = \"<span>O</span><span>O</span><span>X</span>\"\n        } else {\n          this.events[step] = []\n          spanList = \"\"\n        }\n      break\n      default:\n        this.events[step] = []\n        spanList = \"\"\n      break\n    }\n    return spanList\n  }\n}\nclass Sampler extends Tone.Sampler {\n  constructor(sampleUrls, name) {\n    super({\n      urls: sampleUrls,\n      baseUrl: process.env.PUBLIC_URL,\n    })\n    this.name = name\n    this.drawClass = \".\"+this.name+\"Step\"\n    this.eventCb = this.seqSampler\n  }\n  seqSampler(time) {\n    let channelLabel = document.querySelector(this.instrument.drawClass)\n    Tone.Draw.schedule(() => {\n      channelLabel.classList.add(\"draw\")\n    }, time)\n    Tone.Transport.schedule((time) => {\n      Tone.Draw.schedule(() => {\n        channelLabel.classList.remove(\"draw\")\n      }, time)\n    }, \"+0.02\")\n    this.instrument.triggerAttackRelease([24], \"16n\", time)\n  }\n}\nclass instrumentChannel {\n  constructor(name, pattern) {\n    this.pattern = pattern\n    this.name = name\n    this.instrument = this.setInstrument(this.name)\n    this.sequence = new Sequence(this.instrument.eventCb, this.instrument, this.pattern)\n  }\n  getPattern() {\n    return this.sequence.getPattern()\n  }\n  setInstrument(instrument) {\n      return new Sampler({\n          24: `/Drums/${instrument}1.wav`,\n      }, this.name).toDestination()\n  }\n  setStep(step) {\n    return this.sequence.setStep(step)\n  }\n}\nconst channelData = {\n  Kick: [[], [], [], [], [], [], [], []],\n  Snare: [[], [], [], [], [], [], [], []],\n  Clap: [[], [], [], [], [], [], [], []],\n  Hihat: [[], [], [], [], [], [], [], []]\n}\n\nconst setup = () => {\n  const channelList = Object.keys(channelData)\n  channelList.forEach(channel => {\n    instruments[channel] = new instrumentChannel(channel, channelData[channel])\n  })\n}\n\nexport const channelList = () => {\n  const channelList = Object.keys(channelData)\n  return channelList\n}\n\nexport const storeData = () => {\n  channelList().forEach(channel => {\n    channelData[channel] = instruments[channel].getPattern()\n  })\n  return channelData\n}\nexport const loadData = (data) => {\n  channelList().forEach(channel => {\n    channelData[channel] = data[channel]\n  })\n}\n\nexport const instruments = {}\n\nexport const toggle = (innerText) => {\n  if (innerText === \"Load\") {\n    Tone.Transport.bpm.value = 80;\n    Tone.start()\n    setup()\n  } else {\n    Tone.Transport.toggle()\n  }\n  return innerText === \"Start\" ? \"Stop\" : \"Start\"\n}\n\nconst changeBpm = (direction) => {\n  if (direction === \"up\") {\n    Tone.Transport.bpm.value >= 200 ? Tone.Transport.bpm.value = 50 : Tone.Transport.bpm.value += 1\n  } else {\n    Tone.Transport.bpm.value <= 50 ? Tone.Transport.bpm.value = 100 : Tone.Transport.bpm.value -= 1\n  }\n  document.querySelector(\".bpmDisplay .displayP\").innerText = Math.floor(Tone.Transport.bpm.value)\n}\n\nconst changeSwing = (direction) => {\n  if (direction === \"up\") {\n    Tone.Transport.swing >= 0.95 ? Tone.Transport.swing = 0 : Tone.Transport.swing = round(Tone.Transport.swing += 0.1, 1)\n  } else {\n    Tone.Transport.swing <= 0 ? Tone.Transport.swing = 1 : round(Tone.Transport.swing -= 0.1, 1)\n  }\n  document.querySelector(\".swingDisplay .displayP\").innerText = Math.round(Tone.Transport.swing * 100)\n}\n\nexport const changeValue = (direction, name) => {\n  name === \"bpm\" ? changeBpm(direction) : changeSwing(direction)\n}","import React, { useState } from \"react\"\nimport \"./App.scss\"\nimport { toggle, instruments, changeValue, channelList } from \"./FunkBox.js\"\n\n// First we get the viewport height and we multiple it by 1% to get a value for a vh unit\nlet vh = window.innerHeight * 0.01;\n// Then we set the value in the --vh custom property to the root of the document\ndocument.documentElement.style.setProperty('--vh', `${vh}px`);\n\nconst App = () => {\n  const [isloaded, setLoad ] = useState(false)\n  const start = () => {\n    let startSpan = document.querySelector(\".startSpan\")\n    startSpan.innerText = toggle(startSpan.innerText)\n    if (!isloaded) setLoad(true)\n  }\n  return (\n  <div className=\"App\">\n    <h1>\n      <span>FUNK</span>\n      <span>BOX</span>\n    </h1>\n    <div className=\"sequenceContainer\">\n      { isloaded ? channelList().map((channel, index) => (\n      <SequenceChannel key={index} channel={channel\n      }/>\n      ))\n      : <div></div>\n      }\n    </div>\n    {\n      isloaded ? \n      <div className=\"controlContainer\">\n        <ControllItem name=\"bpm\"/>\n        <DisplayItem name=\"bpm\" />\n        <ControllItem name=\"swing\"/>\n        <DisplayItem name=\"swing\" />\n      </div>\n      : \n      <div className=\"menuController\">\n\n      </div>\n    }\n    <div className=\"startButtonContainer\">\n      <button className=\"startButton\" onClick={() => start()}>\n        <span className=\"startSpan\">Load</span>\n      </button>\n    </div>\n  </div>\n  )\n}\n\nconst SequenceChannel = ({channel}) => {\n  const patterns = [0, 1, 2, 3, 4, 5, 6, 7]\n  const changeStep = (index) => {\n    const stepDiv = document.querySelector(\".\" + channel + index)\n    const spanList = instruments[channel].setStep(index)\n    stepDiv.innerHTML = spanList\n  }\n  return (\n  <div className={\"sequenceChannel \" + channel + \"Step\"}>\n      {patterns.map((index) => (\n        <button key={index} className=\"sequenceStep\" onClick={() => changeStep(index)}>\n            <div className={channel+index}>\n            </div>\n        </button>\n      ))}\n  </div>\n  )\n}\n\n\nconst ControllItem = ({name}) => {\n  return (\n  <div className={name+\"Container\"}>\n      <button className=\"add\" onClick={() => changeValue(\"up\", name)}>\n        +\n      </button>\n      <button className=\"sub\" onClick={() => changeValue(\"down\", name)}>\n        -\n      </button>\n  </div>\n  )\n}\n\nconst DisplayItem = ({name}) => {\n  return (\n    <div className={\"displayContainer \" + name + \"Display\"}>\n      <p>\n        {name}\n      </p>\n      <p className=\"displayP\">\n        100\n      </p>\n    </div>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}